import React, { useEffect, useState } from 'react';
import {
  View,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  SafeAreaView,
  ActivityIndicator,
  Alert,
} from 'react-native';
import { useLocalSearchParams, router } from 'expo-router';
import { Ionicons } from '@expo/vector-icons';
import { useSafeAreaInsets } from 'react-native-safe-area-context';
import { Text } from '@/components/Themed';
import Colors from '@/constants/Colors';
import { useMenuStore } from '@/store/menuStore';
import { supabase } from '@/lib/supabase';
import { Database } from '@/lib/supabase.d';

type Restaurant = Database['public']['Tables']['restaurants']['Row'];

export default function MenuScreen() {
  const { id, itemId } = useLocalSearchParams<{ id: string; itemId?: string }>();
  const [restaurant, setRestaurant] = useState<Restaurant | null>(null);
  const [loading, setLoading] = useState(true);
  const insets = useSafeAreaInsets();

  const {
    menuCategories,
    menuGroups,
    products,
    cart,
    setMenuCategories,
    setMenuGroups,
    setProducts,
    addToCart,
  } = useMenuStore();

  useEffect(() => {
    const fetchRestaurantAndMenu = async () => {
      if (!id) return;

      try {
        setLoading(true);

        // Fetch restaurant data
        const { data: restaurantData, error: restaurantError } = await supabase
          .from('restaurants')
          .select('*')
          .eq('id', id.toString())
          .single();

        if (restaurantError) throw restaurantError;
        setRestaurant(restaurantData);

        // TODO: Fetch menu data from your API
        // This is where you'd integrate with your TGF API calls
        // Example:
        // const storeProfile = await getStoreProfile(id);
        // const categories = await getMenuCategories(storeProfile.StoreURL, id);
        // setMenuCategories(categories);

        // If itemId is provided, add that item to cart
        if (itemId) {
          // TODO: Find the specific menu item and add to cart
          // const menuItem = await findMenuItem(itemId);
          // addToCart(menuItem);
        }

      } catch (error) {
        console.error('Error fetching menu data:', error);
        Alert.alert('Error', 'Failed to load menu');
      } finally {
        setLoading(false);
      }
    };

    fetchRestaurantAndMenu();
  }, [id, itemId]);

  if (loading) {
    return (
      <View style={[styles.container, styles.center]}>
        <ActivityIndicator size="large" color={Colors.light.primary} />
        <Text style={styles.loadingText}>Loading menu...</Text>
      </View>
    );
  }

  if (!restaurant) {
    return (
      <View style={[styles.container, styles.center]}>
        <Text style={styles.errorText}>Restaurant not found</Text>
      </View>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()}>
          <Ionicons name="arrow-back" size={24} color="#333" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>{restaurant.name}</Text>
        <TouchableOpacity onPress={() => {/* Navigate to cart */}}>
          <View style={styles.cartButton}>
            <Ionicons name="basket" size={24} color={Colors.light.primary} />
            {cart.length > 0 && (
              <View style={styles.cartBadge}>
                <Text style={styles.cartBadgeText}>{cart.length}</Text>
              </View>
            )}
          </View>
        </TouchableOpacity>
      </View>

      <ScrollView style={styles.content}>
        {/* Menu Categories */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Menu Categories</Text>
          {menuCategories.map((category) => (
            <TouchableOpacity
              key={category.ID}
              style={styles.categoryItem}
              onPress={() => {
                // Navigate to category or load category items
              }}
            >
              <Text style={styles.categoryName}>{category.Name}</Text>
              <Text style={styles.categoryDescription}>{category.Description}</Text>
            </TouchableOpacity>
          ))}
        </View>

        {/* Placeholder for when no menu data is loaded yet */}
        {menuCategories.length === 0 && (
          <View style={styles.placeholderContainer}>
            <Text style={styles.placeholderText}>
              Menu integration in progress...
            </Text>
            <Text style={styles.placeholderSubtext}>
              Connect your restaurant's menu system to display items here
            </Text>
          </View>
        )}
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  center: {
    justifyContent: 'center',
    alignItems: 'center',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#e9ecef',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: '600',
  },
  cartButton: {
    position: 'relative',
  },
  cartBadge: {
    position: 'absolute',
    top: -8,
    right: -8,
    backgroundColor: Colors.light.primary,
    borderRadius: 10,
    minWidth: 20,
    height: 20,
    justifyContent: 'center',
    alignItems: 'center',
  },
  cartBadgeText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: '600',
  },
  content: {
    flex: 1,
    paddingHorizontal: 16,
  },
  section: {
    marginVertical: 16,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: '700',
    marginBottom: 12,
  },
  categoryItem: {
    padding: 16,
    backgroundColor: '#f8f9fa',
    borderRadius: 12,
    marginBottom: 8,
  },
  categoryName: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 4,
  },
  categoryDescription: {
    fontSize: 14,
    color: '#666',
  },
  loadingText: {
    marginTop: 10,
    fontSize: 16,
    color: '#666',
  },
  errorText: {
    fontSize: 18,
    fontWeight: '600',
    color: '#333',
  },
  placeholderContainer: {
    padding: 32,
    alignItems: 'center',
  },
  placeholderText: {
    fontSize: 18,
    fontWeight: '600',
    color: '#333',
    marginBottom: 8,
    textAlign: 'center',
  },
  placeholderSubtext: {
    fontSize: 14,
    color: '#666',
    textAlign: 'center',
  },
});
